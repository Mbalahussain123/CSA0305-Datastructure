#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* left;
    struct node* right;
    int ht;
};
struct node* root = null;
struct node* create(int);
struct node* insert(struct node*, int);
struct node* delet(struct node*, int);
struct node* search(struct node*, int);
struct node* rotate_left(struct node*);
struct node* rotate_right(struct node*);
int balance_factor(struct node*);
int height(struct node*);
void inorder(struct node*);
void preorder(struct node*);
void postorder(struct node*);
int main()
{
    int user_choice, data;
    char user_continue = 'y';
    struct node* result = null;
    while (user_continue == 'y' || user_continue == 'y')
    {
        printf("\n\n------- avl tree --------\n");
        printf("\n1. insert");
        printf("\n2. delete");
        printf("\n3. search");
        printf("\n4. inorder");
        printf("\n5. preorder");
        printf("\n6. postorder");
        printf("\n7. exit");
        printf("\n\nenter your choice: ");
        scanf("%d", &user_choice);
        switch(user_choice)
        {
            case 1:
                printf("\nenter data: ");
                scanf("%d", &data);
                root = insert(root, data);
                break;
            case 2:
                printf("\nenter data: ");
                scanf("%d", &data);
                root = delet(root, data);
                break;
            case 3:
                printf("\nenter data: ");
                scanf("%d", &data);
                result = search(root, data);
                if (result == null)
                {
                    printf("\nnode not found!");
                }
                else
                {
                    printf("\n node found");
                }
                break;
            case 4:
                inorder(root);
                break;
            case 5:
                preorder(root);
                break;
            case 6:
                postorder(root);
                break;
            case 7:
                printf("\n\tprogram terminated\n");
                return 1;
            default:
                printf("\n\tinvalid choice\n");
        }
        printf("\n\ndo you want to continue? ");
        scanf(" %c", &user_continue);
    }
    return 0;
}
struct node* create(int data)
{
    struct node* new_node = (struct node*) malloc (sizeof(struct node));
    if (new_node == null)
    {
        printf("\nmemory can't be allocated\n");
        return null;
    }
    new_node->data = data;
    new_node->left = null;
    new_node->right = null;
    return new_node;
}
struct node* rotate_left(struct node* root)
{
    struct node* right_child = root->right;
    root->right = right_child->left;
    right_child->left = root;
    root->ht = height(root);
    right_child->ht = height(right_child);
    return right_child;
}
struct node* rotate_right(struct node* root)
{
    struct node* left_child = root->left;
    root->left = left_child->right;
    left_child->right = root;
    root->ht = height(root);
    left_child->ht = height(left_child);
    return left_child;
}
int balance_factor(struct node* root)
{
    int lh, rh;
    if (root == null)
        return 0;
    if (root->left == null)
        lh = 0;
    else
        lh = 1 + root->left->ht;
    if (root->right == null)
        rh = 0;
    else
        rh = 1 + root->right->ht;
    return lh - rh;
}
int height(struct node* root)
{
    int lh, rh;
    if (root == null)
    {
        return 0;
    }
    if (root->left == null)
        lh = 0;
    else
        lh = 1 + root->left->ht;
    if (root->right == null)
        rh = 0;
    else
        rh = 1 + root->right->ht;
    if (lh > rh)
        return (lh);
    return (rh);
}
struct node* insert(struct node* root, int data)
{
    if (root == null)
    {
        struct node* new_node = create(data);
        if (new_node == null)
        {
            return null;
        }
        root = new_node;
    }
    else if (data > root->data)
    {
        root->right = insert(root->right, data);
        if (balance_factor(root) == -2)
        {
            if (data > root->right->data)
            {
                root = rotate_left(root);
            }
            else
            {
                root->right = rotate_right(root->right);
                root = rotate_left(root);
            }
        }
    }
    else
    {
        root->left = insert(root->left, data);
        if (balance_factor(root) == 2)
        {
            if (data < root->left->data)
            {
                root = rotate_right(root);
            }
            else
            {
                root->left = rotate_left(root->left);
                root = rotate_right(root);
            }
        }
    }
    root->ht = height(root);
    return root;
}
struct node * delet(struct node *root, int x)
{
    struct node * temp = null;
    if (root == null)
    {
        return null;
    } 
    if (x > root->data)
    {
        root->right = delet(root->right, x);
        if (balance_factor(root) == 2)
        {
            if (balance_factor(root->left) >= 0)
            {
                root = rotate_right(root);
            }
            else
            {
                root->left = rotate_left(root->left);
                root = rotate_right(root);
            }
        }
    }
    else if (x < root->data)
    {
        root->left = delet(root->left, x);
        if (balance_factor(root) == -2)
        {
            if (balance_factor(root->right) <= 0)
            {
                root = rotate_left(root);
            }
            else
            {
                root->right = rotate_right(root->right);
                root = rotate_left(root);
            }
        }
    }
    else
    {
        if (root->right != null)
        { 
            temp = root->right;
            while (temp->left != null)
                temp = temp->left;
            root->data = temp->data;
            root->right = delet(root->right, temp->data);
            if (balance_factor(root) == 2)
            {
                if (balance_factor(root->left) >= 0)
                {
                    root = rotate_right(root);
                }
                else
                {
                    root->left = rotate_left(root->left);
                    root = rotate_right(root);
                }
            }
    }
        else
        {
            return (root->left);
        }
    }
    root->ht = height(root);
    return (root);
}
struct node* search(struct node* root, int key)
{
    if (root == null)
    {
        return null;
    }
    if(root->data == key)
    {
        return root;
    }
    if(key > root->data)
    {
        search(root->right, key);
    }
    else
    {
        search(root->left, key);
    } 
}
void inorder(struct node* root)
{
    if (root == null)
    {
        return;
    }
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}
void preorder(struct node* root)
{
    if (root == null)
    {
        return;
    }
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}
void postorder(struct node* root)
{
    if (root == null)
    {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
} 
